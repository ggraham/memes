% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fimo.R
\name{runFimo}
\alias{runFimo}
\title{Run FIMO on input sequences}
\usage{
runFimo(
  sequences,
  motifs,
  bfile = "motif",
  outdir = "auto",
  parse_genomic_coord = TRUE,
  skip_matched_sequence = TRUE,
  max_strand = TRUE,
  text = TRUE,
  meme_path = NULL,
  silent = TRUE,
  ...
)
}
\arguments{
\item{sequences}{path to fasta file, or stringset input.}

\item{motifs}{path to .meme format file, or universalmotif/universalmotif list input.}

\item{bfile}{path to background file, or special values: "motif", or
"uniform" to use 0-order frequencies contained in the motif, or a uniform
letter distribution. (default: "motif")}

\item{outdir}{output directory location. Only used if text = FALSE. Default:
"auto" to autogenerate directory name. Note: if not using a fasta path as
input, this will be a temporary location unless explicity set.}

\item{parse_genomic_coord}{`logical(1)` whether to parse genomic position
from fasta name. Fasta names must be UCSC format positions (ie
"chr:start-end"). If names of fasta entries are genomic coordinates and
parse_genomic_coord == TRUE, results will contain positions of motif matches,
otherwise FIMO will count positions from 1 to length of fasta file.}

\item{skip_matched_sequence}{`logical(1)` whether or not to include the DNA
sequence of the match. Default: `FALSE`. Note: jobs will complete faster if
set to FALSE. Other utilities can be used to lookup the sequence if
`parse_genomic_coord` is `TRUE`.}

\item{max_strand}{if match is found on both strands, only report strand with
best match.}

\item{text}{`logical(1)` (default: `TRUE`). No output files will be created on the filesystem.
The results are unsorted and no q-values are computed. This setting allows
fast searches on very large inputs.}

\item{meme_path}{path to `meme/bin/` (optional). Defaut: `NULL`, searches
"MEME_PATH" environment variable or "meme_path" option.}

\item{silent}{`logical(1)` whether to suppress stdout/stderr printing to
terminal (default: TRUE). NOTE: if `text = TRUE`, setting `silent = TRUE`
will print all FIMO matches to terminal if the run is successful. Can be
useful for troubleshooting.}

\item{...}{additional commandline arguments to fimo see:
\code{\link{http://meme-suite.org/doc/fimo.html?man_type=web}}}
}
\value{
GenomicRanges object contining positions of each match. Note: if
  `parse_genomic_coords = FALSE`, each `seqnames` entry will be the fasta
  header, and start/end will be the position within that sequence of the
  match. It is a good idea to use `parse_genomic_coords = TRUE` if using
  `get_sequence()` to create input sequences.
}
\description{
NOTE: runs best using `text = TRUE`, setting genomic coordinates in fasta
headers, and using `parse_genomic_coord = TRUE`.
}
\details{
Citation
If you use `runFimo()` in your analysis, please cite:

Charles E. Grant, Timothy L. Bailey, and William Stafford Noble, "FIMO:
Scanning for occurrences of a given motif", Bioinformatics, 27(7):1017-1018,
2011. [full text](http://bioinformatics.oxfordjournals.org/content/early/2011/02/16/bioinformatics.btr064.full)
}
\examples{
\dontrun{
seq <- universalmotif::create_sequences()
# sequences must have names in their fasta headers
names(seq) <- seq_along(seq)
motif <- universalmotif::create_motif()
runFimo(seq, motif, parse_genomic_coord = FALSE)
}
}
